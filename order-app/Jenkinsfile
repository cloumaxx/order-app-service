pipeline {
  agent {
    kubernetes {
      defaultContainer 'jnlp'
      yaml """
        apiVersion: v1
        kind: Pod
        spec:
          containers:
            - name: bash
              image: alpine:3.20
              command: ['sh', '-c', 'cat']
              tty: true
              volumeMounts:
                - name: bin
                  mountPath: /workspace/bin
            - name: kaniko
              image: gcr.io/kaniko-project/executor:latest
              command: ['/busybox/sh', '-c', 'cat']
              tty: true
              volumeMounts:
                - name: kaniko-cache
                  mountPath: /kaniko/cache
                - name: docker-config
                  mountPath: /kaniko/.docker
          volumes:
            - name: kaniko-cache
              emptyDir: {}
            - name: docker-config
              emptyDir: {}
            - name: bin
              emptyDir: {}
      """
    }
  }


  environment {
    REGISTRY          = 'docker.io'
    IMAGE_NAME        = 'docker.io/eduardoalvear/order-app'
    INFRA_REPO_SSH    = 'git@github.com:cloumaxx/order-app-infra.git'
    INFRA_REPO_BRANCH = 'main'
    INFRA_CHART_PATH  = 'charts/order-platform'
    VALUES_FILE       = "${INFRA_CHART_PATH}/values.yaml"
  }

  stages {
    stage('Checkout backend') {
      steps { checkout scm }
    }

    stage('Compute tag') {
      steps {
        dir('order-app') {
          script {
            env.BUILD_TAG_SHORT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
          }
        }
        echo "Tag: ${env.BUILD_TAG_SHORT}"
      }
    }

    stage('Prepare Kaniko auth') {
      steps {
        // Creamos config.json para DockerHub en el path que Kaniko espera
        withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
          container('kaniko') {
            sh '''
              mkdir -p /kaniko/.docker
              cat > /kaniko/.docker/config.json <<EOF
              {
                "auths": {
                  "https://index.docker.io/v1/": {
                    "auth": "$(echo -n "$USER:$PASS" | base64 -w0)"
                  }
                }
              }
EOF
            '''
          }
        }
      }
    }

    stage('Build & Push image (Kaniko)') {
      steps {
        dir('order-app') {
          container('kaniko') {
            sh '''
              /kaniko/executor \
                --context `pwd` \
                --dockerfile `pwd`/Dockerfile \
                --destination=${IMAGE_NAME}:${BUILD_TAG_SHORT} \
                --destination=${IMAGE_NAME}:latest \
                --cache=true --cache-dir=/kaniko/cache
            '''
          }
        }
      }
    }

    stage('Checkout infra repo (SSH)') {
      steps {
        sshagent (credentials: ['ssh-orderapp']) {
          sh """
            rm -rf infra-repo
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null || true
            git clone -b ${INFRA_REPO_BRANCH} ${INFRA_REPO_SSH} infra-repo
          """
        }
      }
    }

    stage('Install yq') {
      steps {
        container('bash') {
          sh """
            set -eux
            apk add --no-cache curl
            curl -sL https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /workspace/bin/yq
            chmod +x /workspace/bin/yq
            /workspace/bin/yq --version
          """
        }
      }
    }

    stage('Bump values.yaml') {
      steps {
        dir('infra-repo') {
          container('bash') {
            sh """
              set -eux
              /workspace/bin/yq -i '.backend.image.repository = "${IMAGE_NAME}"' ${VALUES_FILE}
              /workspace/bin/yq -i '.backend.image.tag = "${BUILD_TAG_SHORT}"' ${VALUES_FILE}
            """
          }
        }
      }
    }

    stage('Commit & Push infra changes') {
      steps {
        dir('infra-repo') {
          sshagent (credentials: ['ssh-orderapp']) {
            sh """
              set -eux
              git config user.email "ci@jenkins.local"
              git config user.name "Jenkins CI"
              git add ${VALUES_FILE}
              git commit -m "ci: bump image to ${IMAGE_NAME}:${BUILD_TAG_SHORT}" || echo "No changes"
              git push origin ${INFRA_REPO_BRANCH}
            """
          }
        }
      }
    }
  }

  post {
    success {
      echo "Imagen publicada: ${IMAGE_NAME}:${BUILD_TAG_SHORT}"
    }
    failure {
      echo "Pipeline failed"
    }
  }
}
